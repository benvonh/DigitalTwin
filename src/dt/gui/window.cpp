#include "window.h"

#include "dt/gui/sub/controller.h"
#include "dt/gui/sub/parameter.h"
#include "dt/gui/file_dialog.h"
#include "dt/usd/world.h"
#include "dt/exception.h"
#include "dt/logging.h"

#include "imgui_impl_opengl3.h"
#include "imgui_impl_sdl3.h"
#include "imgui.h"

#define SDL_ERROR std::runtime_error(dt::exception(SDL_GetError()))

/*============================================================================*/
void dt::Window::FileHandler::invoke(const char *path, int _)
{
    FileHandler::Path = path;
}

/*============================================================================*/
dt::Window::Window()
{
    log::debug("Initializing SDL3...");

    if (!SDL_Init(SDL_INIT_VIDEO))
        throw SDL_ERROR;

    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);
    SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 4);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 6);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK,
                        SDL_GL_CONTEXT_PROFILE_COMPATIBILITY);

    log::debug("Creating SDL3 window...");

#ifdef _DEBUG
	const char* windowTitle = "Digital Twin (Debug)";
#else
	const char* windowTitle = "Digital Twin (Release)";
#endif
    constexpr unsigned windowFlags = SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE;
    _Window = SDL_CreateWindow(windowTitle, 1280, 720, windowFlags);

    if (_Window == nullptr)
        throw SDL_ERROR;

    log::debug("Creating OpenGL context...");

    SDL_SetWindowPosition(_Window, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED);
    _Context = SDL_GL_CreateContext(_Window);

    if (_Context == nullptr)
        throw SDL_ERROR;

    SDL_GL_MakeCurrent(_Window, _Context);
    SDL_GL_SetSwapInterval(1);

    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGui_ImplSDL3_InitForOpenGL(_Window, _Context);
    ImGui_ImplOpenGL3_Init("#version 460 core");

    ImGuiIO &io = ImGui::GetIO();
    io.ConfigFlags |= ImGuiConfigFlags_DockingEnable;
    // io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable; // Bug
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;
	// FIXME: Windows specific
    io.Fonts->AddFontFromFileTTF(R"(C:\Windows\Fonts\CascadiaCode.ttf)", 16.f);
    io.IniFilename = R"(C:\pixi_ws\DigitalTwin\imgui.ini)";

    ImGuiStyle &style = ImGui::GetStyle();
    // Rounding
    style.ChildRounding = 0.f;
    style.FrameRounding = 0.f;
    style.GrabRounding = 0.f;
    style.PopupRounding = 0.f;
    style.ScrollbarRounding = 0.f;
    style.ScrollbarRounding = 0.f;
    style.TabRounding = 0.f;
    style.TreeLinesRounding = 0.f;
    style.WindowRounding = 0.f;
    // Spacing
    // style.ColumnsMinSpacing = 6.f;
    // style.IndentSpacing = 21.f;
    // style.ItemInnerSpacing = ImVec2(4.f, 4.f);
    // style.ItemSpacing = ImVec2(8.f, 4.f);

    // style.WindowPadding = ImVec2(8.f, 8.f);
    // style.FramePadding = ImVec2(4.f, 4.f);
    // style.IndentSpacing = 6.f;
    // style.ScrollbarSize = 16.f;
    // style.GrabMinSize = 16.f;
    // style.WindowBorderSize = 1.f;
    // style.ChildBorderSize = 1.f;
    // style.PopupBorderSize = 1.f;
    // style.FrameBorderSize = 1.f;
    // style.TabBorderSize = 1.f;
    // style.WindowTitleAlign = ImVec2(0.5f, 0.5f);
    // style.WindowMenuButtonPosition = ImGuiDir_Left;
    // style.ColorButtonPosition = ImGuiDir_Right;
    // style.ButtonTextAlign = ImVec2(0.5f, 0.5f);
    // style.SelectableTextAlign = ImVec2(0.5f, 0.5f);

    ImVec4 *colors = style.Colors;
    /*************************************
     * THESE THEMES WERE GENERATED BY AI *
     *************************************/
    // Atom One Dark color theme
    colors[ImGuiCol_Text] = ImVec4(0.80f, 0.85f, 0.88f, 1.00f);         // #abb2bf
    colors[ImGuiCol_TextDisabled] = ImVec4(0.45f, 0.48f, 0.52f, 1.00f); // #5c6370
    colors[ImGuiCol_WindowBg] = ImVec4(0.16f, 0.18f, 0.20f, 1.00f);     // #282c34
    colors[ImGuiCol_ChildBg] = ImVec4(0.18f, 0.20f, 0.22f, 1.00f);      // #2c313c
    colors[ImGuiCol_PopupBg] = ImVec4(0.19f, 0.21f, 0.24f, 1.00f);      // #313640
    colors[ImGuiCol_Border] = ImVec4(0.28f, 0.30f, 0.34f, 1.00f);       // #464b5d
    colors[ImGuiCol_BorderShadow] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
    colors[ImGuiCol_FrameBg] = ImVec4(0.22f, 0.24f, 0.28f, 1.00f);                   // #393f4a
    colors[ImGuiCol_FrameBgHovered] = ImVec4(0.26f, 0.28f, 0.32f, 1.00f);            // #434852
    colors[ImGuiCol_FrameBgActive] = ImVec4(0.30f, 0.32f, 0.36f, 1.00f);             // #4c5363
    colors[ImGuiCol_TitleBg] = ImVec4(0.17f, 0.18f, 0.20f, 1.00f);                   // #23252b
    colors[ImGuiCol_TitleBgActive] = ImVec4(0.20f, 0.22f, 0.24f, 1.00f);             // #32353b
    colors[ImGuiCol_TitleBgCollapsed] = ImVec4(0.13f, 0.14f, 0.15f, 1.00f);          // #21252b
    colors[ImGuiCol_MenuBarBg] = ImVec4(0.20f, 0.22f, 0.25f, 1.00f);                 // #353942
    colors[ImGuiCol_ScrollbarBg] = ImVec4(0.13f, 0.14f, 0.16f, 1.00f);               // #21232b
    colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.30f, 0.32f, 0.36f, 1.00f);             // #4c5363
    colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.38f, 0.40f, 0.44f, 1.00f);      // #61687a
    colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.50f, 0.52f, 0.56f, 1.00f);       // #80869a
    colors[ImGuiCol_CheckMark] = ImVec4(0.56f, 0.87f, 0.65f, 1.00f);                 // #90c966
    colors[ImGuiCol_SliderGrab] = ImVec4(0.40f, 0.60f, 0.95f, 1.00f);                // #66d9ef
    colors[ImGuiCol_SliderGrabActive] = ImVec4(0.50f, 0.70f, 1.00f, 1.00f);          // #82aaff
    colors[ImGuiCol_Button] = ImVec4(0.29f, 0.35f, 0.42f, 1.00f);                    // #495162
    colors[ImGuiCol_ButtonHovered] = ImVec4(0.38f, 0.45f, 0.52f, 1.00f);             // #61687a
    colors[ImGuiCol_ButtonActive] = ImVec4(0.44f, 0.50f, 0.58f, 1.00f);              // #717cb4
    colors[ImGuiCol_Header] = ImVec4(0.28f, 0.34f, 0.40f, 1.00f);                    // #46506a
    colors[ImGuiCol_HeaderHovered] = ImVec4(0.35f, 0.42f, 0.50f, 1.00f);             // #5c6370
    colors[ImGuiCol_HeaderActive] = ImVec4(0.40f, 0.46f, 0.54f, 1.00f);              // #6c7a96
    colors[ImGuiCol_Separator] = ImVec4(0.30f, 0.30f, 0.30f, 1.00f);                 // #4b5263
    colors[ImGuiCol_SeparatorHovered] = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);          // #80869a
    colors[ImGuiCol_SeparatorActive] = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);           // #abb2bf
    colors[ImGuiCol_ResizeGrip] = ImVec4(0.35f, 0.60f, 0.85f, 1.00f);                // #61afef
    colors[ImGuiCol_ResizeGripHovered] = ImVec4(0.45f, 0.70f, 0.95f, 1.00f);         // #82aaff
    colors[ImGuiCol_ResizeGripActive] = ImVec4(0.55f, 0.80f, 1.00f, 1.00f);          // #b4f9f8
    colors[ImGuiCol_InputTextCursor] = ImVec4(0.95f, 0.95f, 0.95f, 1.00f);           // #e5c07b
    colors[ImGuiCol_TabHovered] = ImVec4(0.35f, 0.40f, 0.55f, 1.00f);                // #5c6370
    colors[ImGuiCol_Tab] = ImVec4(0.23f, 0.26f, 0.34f, 1.00f);                       // #353b45
    colors[ImGuiCol_TabSelected] = ImVec4(0.32f, 0.36f, 0.46f, 1.00f);               // #4b5263
    colors[ImGuiCol_TabSelectedOverline] = ImVec4(0.75f, 0.82f, 1.00f, 1.00f);       // #c678dd
    colors[ImGuiCol_TabDimmed] = ImVec4(0.18f, 0.20f, 0.26f, 1.00f);                 // #282c34
    colors[ImGuiCol_TabDimmedSelected] = ImVec4(0.28f, 0.32f, 0.42f, 1.00f);         // #3e4451
    colors[ImGuiCol_TabDimmedSelectedOverline] = ImVec4(0.50f, 0.58f, 0.95f, 1.00f); // #61afef
    colors[ImGuiCol_DockingPreview] = ImVec4(0.30f, 0.55f, 0.90f, 0.35f);            // #61afef (alpha)
    colors[ImGuiCol_DockingEmptyBg] = ImVec4(0.16f, 0.18f, 0.20f, 1.00f);            // #282c34
    colors[ImGuiCol_PlotLines] = ImVec4(0.50f, 0.55f, 0.60f, 1.00f);                 // #abb2bf
    colors[ImGuiCol_PlotLinesHovered] = ImVec4(1.00f, 0.43f, 0.35f, 1.00f);          // #e06c75
    colors[ImGuiCol_PlotHistogram] = ImVec4(0.98f, 0.77f, 0.33f, 1.00f);             // #e5c07b
    colors[ImGuiCol_PlotHistogramHovered] = ImVec4(1.00f, 0.60f, 0.10f, 1.00f);      // #d19a66
    colors[ImGuiCol_TableHeaderBg] = ImVec4(0.22f, 0.26f, 0.30f, 1.00f);             // #353b45
    colors[ImGuiCol_TableBorderStrong] = ImVec4(0.26f, 0.30f, 0.32f, 1.00f);         // #464b5d
    colors[ImGuiCol_TableBorderLight] = ImVec4(0.20f, 0.24f, 0.26f, 1.00f);          // #353b45
    colors[ImGuiCol_TableRowBg] = ImVec4(0.17f, 0.19f, 0.21f, 1.00f);                // #23252b
    colors[ImGuiCol_TableRowBgAlt] = ImVec4(0.19f, 0.21f, 0.23f, 1.00f);             // #282c34
    colors[ImGuiCol_TextLink] = ImVec4(0.51f, 0.71f, 0.95f, 1.00f);                  // #61afef
    colors[ImGuiCol_TextSelectedBg] = ImVec4(0.30f, 0.50f, 0.75f, 0.70f);            // #528bff (alpha)
    colors[ImGuiCol_TreeLines] = ImVec4(0.30f, 0.30f, 0.33f, 1.00f);                 // #4b5263
    colors[ImGuiCol_DragDropTarget] = ImVec4(1.00f, 0.90f, 0.30f, 0.90f);            // #e5c07b (alpha)
    colors[ImGuiCol_NavCursor] = ImVec4(0.90f, 0.80f, 0.50f, 1.00f);                 // #e5c07b
    colors[ImGuiCol_NavWindowingHighlight] = ImVec4(0.65f, 0.70f, 0.75f, 0.70f);     // #abb2bf (alpha)
    colors[ImGuiCol_NavWindowingDimBg] = ImVec4(0.15f, 0.15f, 0.20f, 0.60f);         // #21252b (alpha)
    colors[ImGuiCol_ModalWindowDimBg] = ImVec4(0.10f, 0.10f, 0.12f, 0.70f);          // #181a1f (alpha)

    // Atom One Dark color theme (darker variant)
    colors[ImGuiCol_Text]                   = ImVec4(0.75f, 0.80f, 0.85f, 1.00f); // Slightly dimmer text
    colors[ImGuiCol_TextDisabled]           = ImVec4(0.38f, 0.41f, 0.45f, 1.00f);
    colors[ImGuiCol_WindowBg]               = ImVec4(0.10f, 0.12f, 0.14f, 1.00f); // Darker background
    colors[ImGuiCol_ChildBg]                = ImVec4(0.12f, 0.14f, 0.16f, 1.00f);
    colors[ImGuiCol_PopupBg]                = ImVec4(0.13f, 0.15f, 0.18f, 1.00f);
    colors[ImGuiCol_Border]                 = ImVec4(0.18f, 0.20f, 0.22f, 1.00f);
    colors[ImGuiCol_BorderShadow]           = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
    colors[ImGuiCol_FrameBg]                = ImVec4(0.16f, 0.18f, 0.22f, 1.00f);
    colors[ImGuiCol_FrameBgHovered]         = ImVec4(0.20f, 0.22f, 0.26f, 1.00f);
    colors[ImGuiCol_FrameBgActive]          = ImVec4(0.22f, 0.24f, 0.28f, 1.00f);
    colors[ImGuiCol_TitleBg]                = ImVec4(0.09f, 0.10f, 0.12f, 1.00f);
    colors[ImGuiCol_TitleBgActive]          = ImVec4(0.13f, 0.15f, 0.17f, 1.00f);
    colors[ImGuiCol_TitleBgCollapsed]       = ImVec4(0.07f, 0.08f, 0.09f, 1.00f);
    colors[ImGuiCol_MenuBarBg]              = ImVec4(0.13f, 0.15f, 0.18f, 1.00f);
    colors[ImGuiCol_ScrollbarBg]            = ImVec4(0.09f, 0.10f, 0.12f, 1.00f);
    colors[ImGuiCol_ScrollbarGrab]          = ImVec4(0.22f, 0.24f, 0.28f, 1.00f);
    colors[ImGuiCol_ScrollbarGrabHovered]   = ImVec4(0.28f, 0.30f, 0.34f, 1.00f);
    colors[ImGuiCol_ScrollbarGrabActive]    = ImVec4(0.34f, 0.36f, 0.40f, 1.00f);
    colors[ImGuiCol_CheckMark]              = ImVec4(0.46f, 0.77f, 0.55f, 1.00f);
    colors[ImGuiCol_SliderGrab]             = ImVec4(0.30f, 0.50f, 0.85f, 1.00f);
    colors[ImGuiCol_SliderGrabActive]       = ImVec4(0.40f, 0.60f, 1.00f, 1.00f);
    colors[ImGuiCol_Button]                 = ImVec4(0.18f, 0.22f, 0.28f, 1.00f);
    colors[ImGuiCol_ButtonHovered]          = ImVec4(0.24f, 0.28f, 0.34f, 1.00f);
    colors[ImGuiCol_ButtonActive]           = ImVec4(0.28f, 0.32f, 0.38f, 1.00f);
    colors[ImGuiCol_Header]                 = ImVec4(0.18f, 0.22f, 0.28f, 1.00f);
    colors[ImGuiCol_HeaderHovered]          = ImVec4(0.24f, 0.28f, 0.34f, 1.00f);
    colors[ImGuiCol_HeaderActive]           = ImVec4(0.28f, 0.32f, 0.38f, 1.00f);
    colors[ImGuiCol_Separator]              = ImVec4(0.18f, 0.20f, 0.22f, 1.00f);
    colors[ImGuiCol_SeparatorHovered]       = ImVec4(0.30f, 0.32f, 0.36f, 1.00f);
    colors[ImGuiCol_SeparatorActive]        = ImVec4(0.40f, 0.42f, 0.46f, 1.00f);
    colors[ImGuiCol_ResizeGrip]             = ImVec4(0.22f, 0.40f, 0.65f, 1.00f);
    colors[ImGuiCol_ResizeGripHovered]      = ImVec4(0.32f, 0.50f, 0.75f, 1.00f);
    colors[ImGuiCol_ResizeGripActive]       = ImVec4(0.42f, 0.70f, 0.95f, 1.00f);
    colors[ImGuiCol_InputTextCursor]        = ImVec4(0.85f, 0.85f, 0.85f, 1.00f);
    colors[ImGuiCol_TabHovered]             = ImVec4(0.22f, 0.28f, 0.38f, 1.00f);
    colors[ImGuiCol_Tab]                    = ImVec4(0.13f, 0.16f, 0.22f, 1.00f);
    colors[ImGuiCol_TabSelected]            = ImVec4(0.18f, 0.22f, 0.28f, 1.00f);
    colors[ImGuiCol_TabSelectedOverline]    = ImVec4(0.55f, 0.62f, 0.90f, 1.00f);
    colors[ImGuiCol_TabDimmed]              = ImVec4(0.10f, 0.12f, 0.16f, 1.00f);
    colors[ImGuiCol_TabDimmedSelected]      = ImVec4(0.16f, 0.18f, 0.22f, 1.00f);
    colors[ImGuiCol_TabDimmedSelectedOverline]= ImVec4(0.30f, 0.38f, 0.75f, 1.00f);
    colors[ImGuiCol_DockingPreview]         = ImVec4(0.20f, 0.45f, 0.80f, 0.35f);
    colors[ImGuiCol_DockingEmptyBg]         = ImVec4(0.10f, 0.12f, 0.14f, 1.00f);
    colors[ImGuiCol_PlotLines]              = ImVec4(0.40f, 0.45f, 0.50f, 1.00f);
    colors[ImGuiCol_PlotLinesHovered]       = ImVec4(0.90f, 0.33f, 0.25f, 1.00f);
    colors[ImGuiCol_PlotHistogram]          = ImVec4(0.88f, 0.67f, 0.23f, 1.00f);
    colors[ImGuiCol_PlotHistogramHovered]   = ImVec4(0.90f, 0.50f, 0.10f, 1.00f);
    colors[ImGuiCol_TableHeaderBg]          = ImVec4(0.13f, 0.16f, 0.22f, 1.00f);
    colors[ImGuiCol_TableBorderStrong]      = ImVec4(0.18f, 0.20f, 0.22f, 1.00f);
    colors[ImGuiCol_TableBorderLight]       = ImVec4(0.13f, 0.16f, 0.18f, 1.00f);
    colors[ImGuiCol_TableRowBg]             = ImVec4(0.10f, 0.12f, 0.14f, 1.00f);
    colors[ImGuiCol_TableRowBgAlt]          = ImVec4(0.12f, 0.14f, 0.16f, 1.00f);
    colors[ImGuiCol_TextLink]               = ImVec4(0.41f, 0.61f, 0.85f, 1.00f);
    colors[ImGuiCol_TextSelectedBg]         = ImVec4(0.20f, 0.40f, 0.65f, 0.70f);
    colors[ImGuiCol_TreeLines]              = ImVec4(0.18f, 0.20f, 0.22f, 1.00f);
    colors[ImGuiCol_DragDropTarget]         = ImVec4(0.90f, 0.80f, 0.20f, 0.90f);
    colors[ImGuiCol_NavCursor]              = ImVec4(0.80f, 0.70f, 0.30f, 1.00f);
    colors[ImGuiCol_NavWindowingHighlight]  = ImVec4(0.55f, 0.60f, 0.65f, 0.70f);
    colors[ImGuiCol_NavWindowingDimBg]      = ImVec4(0.10f, 0.10f, 0.14f, 0.60f);
    colors[ImGuiCol_ModalWindowDimBg]       = ImVec4(0.06f, 0.07f, 0.08f, 0.70f);

    // NOTE: For easy copy-paste into a prompt
    // colors[ImGuiCol_Text] = ImVec4();
    // colors[ImGuiCol_TextDisabled] = ImVec4();
    // colors[ImGuiCol_WindowBg] = ImVec4();
    // colors[ImGuiCol_ChildBg] = ImVec4();
    // colors[ImGuiCol_PopupBg] = ImVec4();
    // colors[ImGuiCol_Border] = ImVec4();
    // colors[ImGuiCol_BorderShadow] = ImVec4();
    // colors[ImGuiCol_FrameBg] = ImVec4();
    // colors[ImGuiCol_FrameBgHovered] = ImVec4();
    // colors[ImGuiCol_FrameBgActive] = ImVec4();
    // colors[ImGuiCol_TitleBg] = ImVec4();
    // colors[ImGuiCol_TitleBgActive] = ImVec4();
    // colors[ImGuiCol_TitleBgCollapsed] = ImVec4();
    // colors[ImGuiCol_MenuBarBg] = ImVec4();
    // colors[ImGuiCol_ScrollbarBg] = ImVec4();
    // colors[ImGuiCol_ScrollbarGrab] = ImVec4();
    // colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4();
    // colors[ImGuiCol_ScrollbarGrabActive] = ImVec4();
    // colors[ImGuiCol_CheckMark] = ImVec4();
    // colors[ImGuiCol_SliderGrab] = ImVec4();
    // colors[ImGuiCol_SliderGrabActive] = ImVec4();
    // colors[ImGuiCol_Button] = ImVec4();
    // colors[ImGuiCol_ButtonHovered] = ImVec4();
    // colors[ImGuiCol_ButtonActive] = ImVec4();
    // colors[ImGuiCol_Header] = ImVec4();
    // colors[ImGuiCol_HeaderHovered] = ImVec4();
    // colors[ImGuiCol_HeaderActive] = ImVec4();
    // colors[ImGuiCol_Separator] = ImVec4();
    // colors[ImGuiCol_SeparatorHovered] = ImVec4();
    // colors[ImGuiCol_SeparatorActive] = ImVec4();
    // colors[ImGuiCol_ResizeGrip] = ImVec4();
    // colors[ImGuiCol_ResizeGripHovered] = ImVec4();
    // colors[ImGuiCol_ResizeGripActive] = ImVec4();
    // colors[ImGuiCol_InputTextCursor] = ImVec4();
    // colors[ImGuiCol_TabHovered] = ImVec4();
    // colors[ImGuiCol_Tab] = ImVec4();
    // colors[ImGuiCol_TabSelected] = ImVec4();
    // colors[ImGuiCol_TabSelectedOverline] = ImVec4();
    // colors[ImGuiCol_TabDimmed] = ImVec4();
    // colors[ImGuiCol_TabDimmedSelected] = ImVec4();
    // colors[ImGuiCol_TabDimmedSelectedOverline] = ImVec4();
    // colors[ImGuiCol_DockingPreview] = ImVec4();
    // colors[ImGuiCol_DockingEmptyBg] = ImVec4();
    // colors[ImGuiCol_PlotLines] = ImVec4();
    // colors[ImGuiCol_PlotLinesHovered] = ImVec4();
    // colors[ImGuiCol_PlotHistogram] = ImVec4();
    // colors[ImGuiCol_PlotHistogramHovered] = ImVec4();
    // colors[ImGuiCol_TableHeaderBg] = ImVec4();
    // colors[ImGuiCol_TableBorderStrong] = ImVec4();
    // colors[ImGuiCol_TableBorderLight] = ImVec4();
    // colors[ImGuiCol_TableRowBg] = ImVec4();
    // colors[ImGuiCol_TableRowBgAlt] = ImVec4();
    // colors[ImGuiCol_TextLink] = ImVec4();
    // colors[ImGuiCol_TextSelectedBg] = ImVec4();
    // colors[ImGuiCol_TreeLines] = ImVec4();
    // colors[ImGuiCol_DragDropTarget] = ImVec4();
    // colors[ImGuiCol_NavCursor] = ImVec4();
    // colors[ImGuiCol_NavWindowingHighlight] = ImVec4();
    // colors[ImGuiCol_NavWindowingDimBg] = ImVec4();
    // colors[ImGuiCol_ModalWindowDimBg] = ImVec4();

    for (auto &render : _Renders)
        render.reset();

    FileDialog::SetWindow(_Window);
}

/*============================================================================*/
dt::Window::~Window()
{
    for (auto &render : _Renders)
        render.reset();

    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplSDL3_Shutdown();
    ImGui::DestroyContext();

    SDL_GL_DestroyContext(_Context);
    SDL_DestroyWindow(_Window);
    SDL_Quit();
}

/*============================================================================*/
void dt::Window::show_exception(const dt::viewable_exception &e)
{
    log::debug("Showing exception message...");

    if (!SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR, "Exception", e, _Window))
        throw SDL_ERROR;
}

/*============================================================================*/
void dt::Window::render_frame()
{
RENDER_FRAME_START:
    ImGui_ImplOpenGL3_NewFrame();
    ImGui_ImplSDL3_NewFrame();
    ImGui::NewFrame();
    ImGui::DockSpaceOverViewport();
    ImGuiIO &io = ImGui::GetIO();

    if (!__draw_menu())
        goto RENDER_FRAME_START;

    _Browser.draw();
    _Logs.draw();

    Parameter::Draw();
    Controller::Draw();

    Render::CachePaths();

    for (int i = 0; i < _Render_count; ++i)
    {
        if (_Renders[i].draw())
        {
            _Render_active = i;
            _Renders[i].enable_free_camera();
            SDL_SetWindowRelativeMouseMode(_Window, true);
            io.ConfigFlags |= ImGuiConfigFlags_NoMouse;
        }
    }

    ImGui::ShowDemoWindow(&_Show_demo);
    ImGui::Render();
    glViewport(0, 0, (int)io.DisplaySize.x, (int)io.DisplaySize.y);
    glClearColor(0, 0, 0, 0);
    glClear(GL_COLOR_BUFFER_BIT);
    ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
    SDL_GL_SwapWindow(_Window);
}

/*============================================================================*/
void dt::Window::handle_input()
{
    ImGuiIO &io = ImGui::GetIO();
    SDL_Event event;

    while (SDL_PollEvent(&event))
    {
        ImGui_ImplSDL3_ProcessEvent(&event);

        if (event.type == SDL_EVENT_QUIT ||
            (event.type == SDL_EVENT_WINDOW_CLOSE_REQUESTED &&
             event.window.windowID == SDL_GetWindowID(_Window)))
        {
            _Live = false;
        }

        if (event.type == SDL_EVENT_KEY_DOWN && event.key.scancode == SDL_SCANCODE_Q)
        {
            SDL_Event quitEvent;
            quitEvent.type = SDL_EVENT_QUIT;
            SDL_PushEvent(&quitEvent);
        }
    }

    if (_Render_active >= 0)
    {
        auto &render = _Renders[_Render_active];

        float x, y;
        const SDL_MouseButtonFlags state = SDL_GetRelativeMouseState(&x, &y);
        render.look(x, y, io.DeltaTime);

        const bool *keyboard = SDL_GetKeyboardState(nullptr);

        if (keyboard[SDL_SCANCODE_W])
        {
            render.move<Controller::Direction::FORWARD>(io.DeltaTime);
        }
        if (keyboard[SDL_SCANCODE_A])
        {
            render.move<Controller::Direction::LEFT>(io.DeltaTime);
        }
        // if (keyboard[SDL_SCANCODE_S])
        if (keyboard[SDL_SCANCODE_R])
        {
            render.move<Controller::Direction::BACKWARD>(io.DeltaTime);
        }
        // if (keyboard[SDL_SCANCODE_D])
        if (keyboard[SDL_SCANCODE_S])
        {
            render.move<Controller::Direction::RIGHT>(io.DeltaTime);
        }
        if (keyboard[SDL_SCANCODE_SPACE])
        {
            render.move<Controller::Direction::UP>(io.DeltaTime);
        }
        if (keyboard[SDL_SCANCODE_LSHIFT])
        {
            render.move<Controller::Direction::DOWN>(io.DeltaTime);
        }
        if (keyboard[SDL_SCANCODE_ESCAPE])
        {
            const float mouseX = io.DisplaySize.x / 2;
            const float mouseY = io.DisplaySize.y / 2;
            SDL_WarpMouseInWindow(_Window, mouseX, mouseY);
            SDL_SetWindowRelativeMouseMode(_Window, false);
            io.ConfigFlags &= ~ImGuiConfigFlags_NoMouse;
            _Render_active = -1;
        }
    }
}

/*============================================================================*/
bool dt::Window::__draw_menu()
{
    if (ImGui::BeginMainMenuBar())
    {
        if (ImGui::BeginMenu("File"))
        {
            // TODO: Should probably check if unsaved and prompt user
            if (ImGui::MenuItem("New", "Ctrl+N"))
            {
                FileHandler::Path.clear();
                FileDialog::Show<FileDialog::Mode::SAVE>(NewPtr<FileHandler>(), FileDialog::USD_FILTER);

                __modal_update_during_file_dialog();

                if (!FileHandler::Path.empty())
                {
                    for (auto &render : _Renders)
                        render.reset();

                    World::NewStage(FileHandler::Path);
                }

                return false;
            }
            if (ImGui::MenuItem("Open", "Ctrl+O"))
            {
                FileHandler::Path.clear();
                FileDialog::Show<FileDialog::Mode::OPEN>(NewPtr<FileHandler>(), FileDialog::USD_FILTER);

                __modal_update_during_file_dialog();

                if (!FileHandler::Path.empty())
                {
                    for (auto &render : _Renders)
                        render.reset();

                    World::OpenStage(FileHandler::Path);
                }

                return false;
            }
            if (ImGui::MenuItem("Save", "Ctrl+S"))
            {
                World::SaveStage();
            }
            if (ImGui::MenuItem("Export", "Ctrl+E"))
            {
                FileHandler::Path.clear();
                FileDialog::Show<FileDialog::Mode::SAVE>(NewPtr<FileHandler>(), FileDialog::USD_FILTER);

                __modal_update_during_file_dialog();

                if (!FileHandler::Path.empty())
                    World::ExportStage(FileHandler::Path);

                return false;
            }
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Rendering"))
        {
            ImGui::Text("Active Renders: %d/%d", _Render_count, _Renders.size());

            if (ImGui::Button("Add Render Viewport"))
            {
                if (_Render_count < _Renders.size())
                {
                    _Render_count++;
                    _Renders[_Render_count - 1].reset();
                }
            }
            if (ImGui::Button("Remove Render Viewport"))
            {
                if (_Render_count > 1)
                {
                    _Render_count--;
                }
            }
            ImGui::EndMenu();
        }
        ImGui::EndMainMenuBar();
    }
    else
        throw exception("Unexpected programming error");

    return true;
}

/*============================================================================*/
void dt::Window::__modal_update_during_file_dialog()
{
    // VERY DANGEROUS!
    //
    // We assume that the GUI is inaccessible
    // while a modal window is open (file dialog)
    //
    // We must NOT resume rendering where we left off;
    // Restart the frame then start rendering again!
    while (!FileDialog::Done)
    {
        this->render_frame();
        this->handle_input();
    }
}